#!/usr/bin/env python

import sys
import os.path
import socket
import csv
import functools
import logging

import argparse

from boto.s3.connection import S3Connection, Location

from tardis.util import iso8601
from tardis.manifest import Manifest
from tardis import needs_put, put_archive, get_archive, create_archive, restore_archive
from tardis import put_manifest, latest_manifest
from tardis import backup, restore


logging.basicConfig(level=logging.DEBUG,
                    format="%(asctime)s %(levelname)s %(filename)s:%(lineno)d %(message)s")


def build_arg_parser():
    def username():
        username = os.environ['USER']
        if not username:
            raise LookupError("Unable to determine username")

        return username

    def hostname():
        return socket.gethostname()

    def existing_directory(path):
        abspath = os.path.abspath(path)
        if not os.path.isdir(abspath):
            raise argparse.ArgumentTypeError("{} does not name a directory".format(path))

        return abspath

    parser = argparse.ArgumentParser(description='Backups, yay!')
    parser.add_argument('--username', metavar='NAME',
                        default=username(), required=False,
                        help='username, defaults to $USER')
    parser.add_argument('--hostname', metavar='NAME',
                        default=hostname(), required=False,
                        help='hostname')
    subparsers = parser.add_subparsers(dest='command', help='sub-command help')

    backup_parser = subparsers.add_parser('backup', help='backup directories')
    backup_parser.add_argument('paths', metavar='PATH',
                                type=existing_directory, nargs='+',
                                help='directories to backup')

    restore_parser = subparsers.add_parser('restore', help='restore directories')
    restore_parser.add_argument('paths', metavar='PATH',
                                nargs='+', help='directories to restore')
    return parser


def main():
    parser = build_arg_parser()
    args = parser.parse_args()

    username = args.username
    hostname = args.hostname

    with open("/home/{}/.tardis".format(username)) as csvfile:
        reader = csv.DictReader(csvfile)
        aws_info = reader.next()

    connection = S3Connection(aws_info['Access Key Id'], aws_info['Secret Access Key'])
    bucket = connection.get_bucket(aws_info['Bucket'])

    if args.command == 'backup':
        backup(args.paths,
               [],
               functools.partial(put_archive, bucket, create_archive),
               functools.partial(needs_put, bucket),
               functools.partial(put_manifest, bucket),
               functools.partial(latest_manifest, bucket, hostname, username),
               functools.partial(Manifest.for_directories, hostname, username)
              )

    if args.command == 'restore':
        restore(args.paths,
                functools.partial(get_archive, bucket),
                restore_archive,
                functools.partial(latest_manifest, bucket, hostname, username),
               )


if __name__ == '__main__':
    main()
